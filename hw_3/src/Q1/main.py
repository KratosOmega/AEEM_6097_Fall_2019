import frbs
import matplotlib.pyplot as plt
import math

def generate_membership_func():
    num_of_cat = 9
    funcs = {
        "x1" : [[0, 1], [0.01, 0]],
        "x2" : [[0.99, 0], [1, 1]],
    }
    step = 0.005
    init = 0.005

    for i in range(3, num_of_cat+1):
        print(i)
        key = "x" + str(i)
        funcs[key] = [[init - step, 0], [init, 1], [init + step, 0]]
        step = step * 2
        init += step

    return funcs

def performance(X, Yh, Yt):
    deviations = []
    diffs = []
    for i in range(len(X)):
        deviations.append(Yh[i] - Yt[i])
        diffs.append(abs(Yh[i] - Yt[i]))

    plt.plot(X, deviations)

    avg =  sum(diffs) / len(diffs)
    return avg

def get_data():
	# ----------------------------------------- preset dicts
    input_funcs = {
        "input_1" : {
            "S" : [[0, 0], [0.25, 1], [0.5, 0]],
            "M" : [[0.25, 0], [0.5, 1], [0.75, 0]],
            "B" : [[0.5, 0], [1, 1]],
        },
        "input_2" : {
            "x1" : [[0, 1], [0.01, 0]],
            "x2" : [[0, 0], [0.05, 1], [0.1, 0]],
            "x3" : [[0.05, 0], [0.125, 1], [0.2, 0]],
            "x4" : [[0.125, 0], [0.225, 1], [0.335, 0]],
            "x5" : [[0.225, 0], [0.35, 1], [0.475, 0]],
            "x6" : [[0.35, 0], [0.5, 1], [0.65, 0]],
            "x7" : [[0.5, 0], [0.675, 1], [0.85, 0]],
            "x8" : [[0.675, 0], [0.875, 1], [1, 0]],
            "x9" : [[0.99, 0], [1, 1]],
        },
    }

    output_funcs = {
        "output_1" : {
            "y1": [[0, 0], [0.25, 1], [0.5, 0]],
            "y2" : [[0.25, 0], [1, 1]],
        },
        "output_2" : {
            "y1" : [[0, 1], [0.01, 0]],
            "y2" : [[0, 0], [0.3, 1], [0.49, 0]],
            "y3" : [[0.33, 0], [0.49, 1], [0.65, 0]],
            "y4" : [[0.52, 0], [0.65, 1], [0.78, 0]],
            "y5" : [[0.68, 0], [0.78, 1], [0.88, 0]],
            "y6" : [[0.81, 0], [0.88, 1], [0.95, 0]],
            "y7" : [[0.91, 0], [0.95, 1], [0.99, 0]],
            "y8" : [[0.98, 0], [0.99, 1], [1, 0]],
            "y9" : [[0.99, 0], [1, 1]],
        },
        "output_3" : {
            "y1" : [[0, 1], [0.01, 0]],
            "y2" : [[0, 0], [0.16, 1], [0.28, 0]],
            "y3" : [[0.16, 0], [0.28, 1], [0.4, 0]],
            "y4" : [[0.28, 0], [0.4, 1], [0.52, 0]],
            "y5" : [[0.4, 0], [0.52, 1], [0.64, 0]],
            "y6" : [[0.52, 0], [0.64, 1], [0.76, 0]],
            "y7" : [[0.64, 0], [0.76, 1], [0.88, 0]],
            "y8" : [[0.76, 0], [0.88, 1], [1, 0]],
            "y9" : [[0.99, 0], [1, 1]],
        },
        "output_4" : {
            "y1" : [[0, 1], [0.01, 0]],
            "y2" : [[0, 0], [0.07, 1], [0.16, 0]],
            "y3" : [[0.12, 0], [0.21, 1], [0.3, 0]],
            "y4" : [[0.26, 0], [0.35, 1], [0.44, 0]],
            "y5" : [[0.4, 0], [0.49, 1], [0.58, 0]],
            "y6" : [[0.54, 0], [0.63, 1], [0.72, 0]],
            "y7" : [[0.68, 0], [0.77, 1], [0.86, 0]],
            "y8" : [[0.82, 0], [0.91, 1], [1, 0]],
            "y9" : [[0.99, 0], [1, 1]],
        },
        "output_5" : {
            "y1" : [[0, 1], [0.01, 0]],
            "y2" : [[0, 0], [0.35, 1], [0.7, 0]],
            "y3" : [[0.05, 0], [0.39999999999999997, 1], [0.75, 0]],
            "y4" : [[0.1, 0], [0.44999999999999996, 1], [0.7999999999999999, 0]],
            "y5" : [[0.15000000000000002, 0], [0.5, 1], [0.85, 0]],
            "y6" : [[0.2, 0], [0.55, 1], [0.8999999999999999, 0]],
            "y7" : [[0.25, 0], [0.6, 1], [0.95, 0]],
            "y8" : [[0.3, 0], [0.6499999999999999, 1], [1.0, 0]],
            "y9" : [[0.99, 0], [1, 1]],
        },
        "output_6" : {
            "y1" : [[0, 1], [0.01, 0]],
            "y2" : [[0, 0], [0.10142857142857148, 1], [0.20285714285714296, 0]],
            "y3" : [[0.13285714285714284, 0], [0.23428571428571432, 1], [0.3357142857142858, 0]],
            "y4" : [[0.2657142857142857, 0], [0.36714285714285716, 1], [0.46857142857142864, 0]],
            "y5" : [[0.3985714285714285, 0], [0.5, 1], [0.6014285714285714, 0]],
            "y6" : [[0.5314285714285714, 0], [0.6328571428571428, 1], [0.7342857142857143, 0]],
            "y7" : [[0.6642857142857141, 0], [0.7657142857142856, 1], [0.8671428571428571, 0]],
            "y8" : [[0.7971428571428569, 0], [0.8985714285714284, 1], [0.9999999999999999, 0]],
            "y9" : [[0.99, 0], [1, 1]],
        },
        "output_7" : {
            "y1" : [[0, 1], [0.01, 0]],
            "y2" : [[0, 0], [0.07092857142857142, 1], [0.14185714285714285, 0]],
            "y3" : [[0.14085714285714285, 0], [0.21178571428571427, 1], [0.2827142857142857, 0]],
            "y4" : [[0.2817142857142857, 0], [0.35264285714285715, 1], [0.42357142857142854, 0]],
            "y5" : [[0.42257142857142854, 0], [0.49349999999999994, 1], [0.5644285714285714, 0]],
            "y6" : [[0.5634285714285714, 0], [0.6343571428571428, 1], [0.7052857142857143, 0]],
            "y7" : [[0.7042857142857142, 0], [0.7752142857142856, 1], [0.8461428571428571, 0]],
            "y8" : [[0.845142857142857, 0], [0.9160714285714284, 1], [0.9869999999999999, 0]],
            "y9" : [[0.99, 0], [1, 1]],
        },
        "output_8" : {
            "y1" : [[0, 1], [0.01, 0]],
            "y2" : [[0, 0], [0.3, 1], [0.49, 0]],
            "y3" : [[0.05, 0], [0.37, 1], [0.69, 0]],
            "y4" : [[0.53, 0], [0.69, 1], [0.85, 0]],
            "y5" : [[0.77, 0], [0.85, 1], [0.93, 0]],
            "y6" : [[0.89, 0], [0.93, 1], [0.97, 0]],
            "y7" : [[0.95, 0], [0.97, 1], [0.99, 0]],
            "y8" : [[0.98, 0], [0.99, 1], [1, 0]],
            "y9" : [[0.99, 0], [1, 1]],
        },
        "output_9" : {
            "y1" : [[0, 1], [0.01, 0]],
            "y2" : [[0, 0], [0.2, 1], [0.4, 0]],
            "y3" : [[0.2, 0], [0.4, 1], [0.6, 0]],
            "y4" : [[0.4, 0], [0.5, 1], [0.6, 0]],
            "y5" : [[0.5, 0], [0.6, 1], [0.7, 0]],
            "y6" : [[0.6, 0], [0.7, 1], [0.8, 0]],
            "y7" : [[0.7, 0], [0.75, 1], [0.8, 0]],
            "y8" : [[0.75, 0], [0.8, 1], [1, 0]],
            "y9" : [[0.99, 0], [1, 1]],
        },
        "output_10" : {
            "y1" : [[0, 1], [0.01, 0]],
            "y2" : [[0.01, 0], [0.2, 1], [0.4, 0]],
            "y3" : [[0.2, 0], [0.4, 1], [0.6, 0]],
            "y4" : [[0.4, 0], [0.5, 1], [0.6, 0]],
            "y5" : [[0.5, 0], [0.6, 1], [0.7, 0]],
            "y6" : [[0.6, 0], [0.7, 1], [0.8, 0]],
            "y7" : [[0.7, 0], [0.8, 1], [0.9, 0]],
            "y8" : [[0.85, 0], [0.95, 1], [0.99, 1]],
            "y9" : [[0.99, 0], [1, 1]],
        },
        "output_11" : {
            "y1" : [[0, 1], [0.01, 0]],
            "y2" : [[0.01, 0], [0.2, 1], [0.4, 0]],
            "y3" : [[0.2, 0], [0.4, 1], [0.6, 0]],
            "y4" : [[0.4, 0], [0.5, 1], [0.6, 0]],
            "y5" : [[0.5, 0], [0.6, 1], [0.7, 0]],
            "y6" : [[0.6, 0], [0.7, 1], [0.8, 0]],
            "y7" : [[0.7, 0], [0.8, 1], [0.9, 0]],
            "y8" : [[0.89, 0], [0.95, 1], [0.99, 1]],
            "y9" : [[0.99, 0], [1, 1]],
        }
    }
    # the larger range of the triangle = faster y increase

    # 3 * 2 = 6 rules totoally
    # rules[0] is the input & logic
    # ex: "S,and,M|B"
    # S
    #
    """
    rules = [
        ["S", "SM"],
        #["S", "L"],
        #["M", "SM"],
        ["M", "L"],
        #["B", "SM"],
        ["B", "L"],
    ]
    """
    """
    x is in step of 0.1
    y is in step of 0.2
    """

    rules = [
        ["x1", "y1"],
        ["x2", "y2"],
        ["x3", "y3"],
        ["x4", "y4"],
        ["x5", "y5"],
        ["x6", "y6"],
        ["x7", "y7"],
        ["x8", "y8"],
        ["x9", "y9"],
    ]

    return input_funcs, output_funcs, rules

def main(inp, out):
    # -----------------------------------------
    input_funcs, output_funcs, rules = get_data()

    fuzzy = frbs.FRBS(input_funcs, output_funcs, 0.001)
    input_1 = 0
    step_size = 0.001

    X = []
    Y_fuzzy = []
    Y_origin = []

    while input_1 <= 1:
        fuzz = fuzzy.fuzzification(input_1, fuzzy.input_func_set[inp])
        evaled_rules = fuzzy.rules_eval(fuzz, rules)
        crisp = fuzzy.defuzzification(fuzz, evaled_rules, out)
        X.append(input_1)
        Y_fuzzy.append(crisp)
        Y_origin.append(math.pow(input_1, 0.45))
        input_1 += step_size

    plt.plot(X, Y_fuzzy, X, Y_origin)
    plt.show()

    avg_performance = performance(X, Y_fuzzy, Y_origin)
    print(avg_performance)

def debug(inp, out):
    # -----------------------------------------
    input_funcs, output_funcs, rules = get_data()

    fuzzy = frbs.FRBS(input_funcs, output_funcs, 0.001)
    input_1 = 0.99

    fuzz = fuzzy.fuzzification(input_1, fuzzy.input_func_set[inp])
    evaled_rules = fuzzy.rules_eval(fuzz, rules)
    yH = fuzzy.defuzzification(fuzz, evaled_rules, out)
    yT = math.pow(input_1, 0.45)

    print(input_1)
    print(yH)
    print(yT)
    print("------------")
    print(evaled_rules)


if __name__ == '__main__':
    inp = "input_2"
    out = "output_11"
    main(inp, out)
    #debug(inp, out)
    """
    test = generate_membership_func()
    for k, v in test.items():
        print(k, v)
    """

